package app;

import java.util.Scanner;
import java.util.Stack;

public class BitTree
{
	private int data;
	private BitTree lchild;
	private BitTree rchild;
	private int flag;          //耍了点小伎俩，中序后序实在不会怎么判断已经入栈过的子节点
	
	public BitTree(int data)
	{
		this.data=data;
		this.lchild=this.rchild=null;
		this.flag=0;
	}
	
	public static BitTree createBitTree(Scanner reader)
	{
		BitTree root=null;
		int m=reader.nextInt();
		if(m<=0) return null;
		root=new BitTree(m);
		root.lchild=createBitTree(reader);
		root.rchild=createBitTree(reader);
		return root;
	}
	
	public static void preVisited(BitTree root)     /*迭代前序遍历*/
	{
		if (root==null)
		{
			return;
		}
		System.out.println(root.data);
		preVisited(root.lchild);
		preVisited(root.rchild);
		
	}
	
	public static void preVisited1(BitTree root)     /*迭代前序遍历*/
	{
		if (root==null)
		{
			return;
		}
		Stack <BitTree> stack =new Stack <BitTree>();
		while (root!=null)
		{
			System.out.println(root.data);
			stack.push(root);
			root=root.lchild;
		}
		
	}
	

}
