package app;
public claas way
{
   final int N = 202;
   final int inf = 1000000000; 
   int dp[]=new int[N * 2][N][N];
   
   boolean isValid(int step,int x1,int x2,int n) //判断状态是否合法
   { 
     int y1 = step - x1, y2 = step - x2;
    return ((x1 >= 0) && (x1 < n) && (x2 >= 0) && (x2 < n) && (y1 >= 0) && (y1 < n) && (y2 >= 0) && (y2 < n));
   }
 
  int getValue(int step, int x1,int x2,int n) 
  { 
    return isValid(step, x1, x2, n)?dp[step][x1][x2]:(-inf); //处理越界 不存在的位置 给负无穷的值
  }
 
  //状态表示dp[step][i][j] 并且i <= j, 第step步  两个人分别在第i行和第j行的最大得分 时间复杂度O(n^3) 空间复杂度O(n^3) 
  int getAnswer(int a[N][N],int n) 
  {
    int P = n * 2 - 2; //最终的步数
    int i,j,step;
    
    //不能到达的位置 设置为负无穷大
    for (i = 0; i < n; ++i) 
    {
        for (j = i; j < n; ++j) 
        {
            dp[0][i][j] = -inf;
        }
    
    }
    dp[0][0][0] = a[0][0];
 
      for (step = 1; step <= P; ++step) {
        for (i = 0; i < n; ++i) {
            for (j = i; j < n; ++j) {
                dp[step][i][j] = -inf;
                if (!isValid(step, i, j, n)) { //非法位置
                    continue;
                }
                //对于合法的位置进行dp
                if (i != j) {
                    dp[step][i][j] = max(dp[step][i][j], getValue(step - 1, i - 1, j - 1, n));
                    dp[step][i][j] = max(dp[step][i][j], getValue(step - 1, i - 1, j, n));
                    dp[step][i][j] = max(dp[step][i][j], getValue(step - 1, i, j - 1, n));
                    dp[step][i][j] = max(dp[step][i][j], getValue(step - 1, i, j,n));
                    dp[step][i][j] += a[i][step - i] + a[j][step - j];  //不在同一个格子，加两个数
                }
                else {
                    dp[step][i][j] = max(dp[step][i][j], getValue(step - 1, i - 1, j - 1, n));
                    dp[step][i][j] = max(dp[step][i][j], getValue(step - 1, i - 1, j,  n));
                    dp[step][i][j] = max(dp[step][i][j], getValue(step - 1, i, j,  n));
                    dp[step][i][j] += a[i][step - i]; // 在同一个格子里，只能加一次
                }
                
            }
        }
    }
    return dp[P][n - 1][n- 1];
}

public class taet1
{

	public static void main(String[] args)
	{
		// TODO Auto-generated method stub

	}

}
